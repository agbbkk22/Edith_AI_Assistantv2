import { MeetingNote } from '../types/meetingNotes';
import { FollowUpEmail } from '../types/followup';

function generateEmailContent(notes: MeetingNote[]): string {
  const summary = notes.find(note => note.type === 'summary');
  const actionItems = notes.filter(note => note.type === 'action-item');
  const decisions = notes.filter(note => note.type === 'decision');
  const keyPoints = notes.filter(note => note.type === 'key-point');

  let content = '';

  // Add summary
  if (summary) {
    content += `Meeting Summary:\n${summary.content}\n\n`;
  }

  // Add key points
  if (keyPoints.length > 0) {
    content += 'Key Points Discussed:\n';
    keyPoints.forEach(point => {
      content += `• ${point.content}\n`;
    });
    content += '\n';
  }

  // Add decisions
  if (decisions.length > 0) {
    content += 'Decisions Made:\n';
    decisions.forEach(decision => {
      content += `• ${decision.content}\n`;
    });
    content += '\n';
  }

  // Add action items
  if (actionItems.length > 0) {
    content += 'Action Items:\n';
    actionItems.forEach(item => {
      const assignee = item.assignee ? ` (Assigned to: ${item.assignee})` : '';
      const dueDate = item.dueDate ? ` (Due: ${item.dueDate.toLocaleDateString()})` : '';
      content += `• ${item.content}${assignee}${dueDate}\n`;
    });
    content += '\n';
  }

  // Add footer
  content += '\nThis is an automated follow-up email generated by your Business Assistant. ' +
             'Please review and ensure all action items are properly assigned and scheduled.';

  return content;
}

export function generateFollowUpEmail(
  meetingId: string,
  notes: MeetingNote[],
  attendees: string[],
): FollowUpEmail {
  const subject = 'Meeting Follow-up: ' + 
    (notes.find(n => n.type === 'summary')?.content.slice(0, 50) ?? 'Meeting Summary');

  const scheduledFor = new Date();
  scheduledFor.setMinutes(scheduledFor.getMinutes() + 15); // Send after 15 minutes

  return {
    id: `followup-${meetingId}`,
    meetingId,
    subject,
    content: generateEmailContent(notes),
    recipients: attendees,
    scheduledFor,
  };
}